import{_,c,a as s,F as f,r as g,o as u,w as v,d as w,u as p,t as b,e as y,f as x}from"./index-Bl8zwFR2.js";import{u as h,a as k}from"./DataStore-D9cBWNCH.js";const C={class:"station-form"},S=["id","value"],D=["for"],V={__name:"ChoixStation",setup(m){const o=h();return(e,t)=>(u(),c("fieldset",C,[t[1]||(t[1]=s("legend",{class:"station-legend"},"Choisissez la/les station(s) à afficher :",-1)),(u(),c(f,null,g(["piensg027","piensg028","piensg030","piensg031","piensg032"],a=>s("div",{class:"station-option",key:a},[v(s("input",{type:"checkbox",id:a,value:a,"onUpdate:modelValue":t[0]||(t[0]=d=>p(o).station=d)},null,8,S),[[w,p(o).station]]),s("label",{for:a},b(a),9,D)])),64))]))}},R=_(V,[["__scopeId","data-v-ee1a28dc"]]),M={class:"weather-form"},$={class:"weather-option-all"},B=["checked"],P=["id","value"],E=["for"],L={__name:"ChoixCapteur",setup(m){const o=h(),e=d=>({temperature:"Température",pressure:"Pression",humidity:"Humidité",rain:"Précipitations",luminosity:"Luminosité",wind_heading:"Direction du vent",wind_speed_avg:"Vitesse moyenne du vent",position:"Position"})[d]||d,t=y(()=>o.selectedMeasures.length===8),a=()=>{t.value?o.selectedMeasures=[]:o.selectedMeasures=["temperature","pressure","humidity","rain","luminosity","wind_heading","wind_speed_avg","position"]};return(d,n)=>(u(),c("fieldset",M,[n[2]||(n[2]=s("legend",{class:"weather-legend"},"Choisissez les mesures que vous souhaitez voir :",-1)),s("div",$,[s("input",{type:"checkbox",id:"select-all",checked:t.value,onChange:a},null,40,B),n[1]||(n[1]=s("label",{for:"select-all"},"Tout sélectionner",-1))]),(u(),c(f,null,g(["temperature","pressure","humidity","rain","luminosity","wind_heading","wind_speed_avg","position"],r=>s("div",{class:"weather-option",key:r},[v(s("input",{type:"checkbox",id:r,value:r,"onUpdate:modelValue":n[0]||(n[0]=i=>p(o).selectedMeasures=i)},null,8,P),[[w,p(o).selectedMeasures]]),s("label",{for:r},b(e(r)),9,E)])),64))]))}},T=_(L,[["__scopeId","data-v-c156437b"]]),U=["disabled"],z={__name:"ValidationBouton",setup(m){const o=x(),e=h(),t=k();let a=e.mode;const d=async()=>{console.log("Mesures sélectionnées :",e.queryParams),console.log("URL auto ?:",e.url_fetch);try{if(e.url_fetch.length>1){const i=e.url_fetch.map(l=>r(l));t.data=await Promise.all(i),console.log("Données récupérées:",t.data)}else t.data=await r(e.url_fetch),console.log("Données récupérées:",t.data);o.push("/dashboard"+a)}catch(i){console.error("Une erreur s'est produite, impossible de récupérer les données",i)}},n=y(()=>e.mode==="sample"&&!e.startDate||e.selectedMeasures.length===0||e.station.length===0),r=async i=>{try{const l=await fetch(i);if(!l.ok)throw new Error("Erreur de récupération des données");return await l.json()}catch(l){throw console.error("Erreur lors de la récupération des données:",l),l}};return(i,l)=>(u(),c("button",{class:"validate-btn",onClick:d,disabled:n.value},"Valider",8,U))}},j=_(z,[["__scopeId","data-v-06a39dc5"]]);export{T as C,j as V,R as a};
