import{_ as h,c as d,a as t,F as g,e as v,o as u,w,f as b,u as _,t as y,g as k,r as x,h as C,i as V,j as S}from"./index-DxD6wQWp.js";import{u as m,a as D}from"./DataStore-BRjIc8RO.js";const M={class:"station-form"},$=["id","value","checked"],B=["for"],L={__name:"ChoixStation",setup(f){const o=m();return(e,s)=>(u(),d("fieldset",M,[s[1]||(s[1]=t("legend",{class:"station-legend"},"Choisissez la/les station(s) à afficher :",-1)),(u(),d(g,null,v(["piensg027","piensg028","piensg030","piensg031","piensg032"],a=>t("div",{class:"station-option",key:a},[w(t("input",{type:"checkbox",id:a,value:a,"onUpdate:modelValue":s[0]||(s[0]=r=>_(o).station=r),checked:a==="piensg031"},null,8,$),[[b,_(o).station]]),t("label",{for:a},y(a),9,B)])),64))]))}},W=h(L,[["__scopeId","data-v-41cbb2f4"]]),P={class:"weather-form"},E={class:"weather-option-all"},U=["checked"],z=["id","value"],N=["for"],T={__name:"ChoixCapteur",setup(f){const o=m(),e=r=>({temperature:"Température",pressure:"Pression",humidity:"Humidité",rain:"Précipitations",luminosity:"Luminosité",wind_heading:"Direction du vent",wind_speed_avg:"Vitesse moyenne du vent",position:"Position"})[r]||r,s=k(()=>o.selectedMeasures.length===8),a=()=>{s.value?o.selectedMeasures=[]:o.selectedMeasures=["temperature","pressure","humidity","rain","luminosity","wind_heading","wind_speed_avg","position"]};return(r,i)=>(u(),d("fieldset",P,[i[2]||(i[2]=t("legend",{class:"weather-legend"},"Choisissez les mesures que vous souhaitez voir :",-1)),t("div",E,[t("input",{type:"checkbox",id:"select-all",checked:s.value,onChange:a},null,40,U),i[1]||(i[1]=t("label",{for:"select-all"},"Tout sélectionner",-1))]),(u(),d(g,null,v(["temperature","pressure","humidity","rain","luminosity","wind_heading","wind_speed_avg","position"],l=>t("div",{class:"weather-option",key:l},[w(t("input",{type:"checkbox",id:l,value:l,"onUpdate:modelValue":i[0]||(i[0]=p=>_(o).selectedMeasures=p)},null,8,z),[[b,_(o).selectedMeasures]]),t("label",{for:l},y(e(l)),9,N)])),64))]))}},G=h(T,[["__scopeId","data-v-c156437b"]]),j=["disabled"],q={key:0,class:"spinner"},A={__name:"ValidationBouton",setup(f){const o=S(),e=m(),s=D();let a=e.mode;const r=x(!1),i=async()=>{console.log("Mesures sélectionnées :",e.queryParams),console.log("URL auto ?:",e.url_fetch),r.value=!0;try{if(e.url_fetch.length>1){const c=e.url_fetch.map(n=>p(n));s.data=await Promise.all(c),console.log("Données récupérées:",s.data)}else s.data=await p(e.url_fetch),console.log("Données récupérées:",s.data);o.push("/dashboard"+a)}catch(c){console.error("Une erreur s'est produite, impossible de récupérer les données",c)}finally{r.value=!1}},l=k(()=>e.mode==="sample"&&!e.startDate||e.selectedMeasures.length===0||e.station.length===0),p=async c=>{try{const n=await fetch(c);if(!n.ok)throw new Error("Erreur de récupération des données");return await n.json()}catch(n){throw console.error("Erreur lors de la récupération des données:",n),n}};return(c,n)=>(u(),d("button",{class:"validate-btn",onClick:i,disabled:l.value},[r.value?(u(),d("span",q)):C("",!0),n[0]||(n[0]=V(" Valider "))],8,j))}},J=h(A,[["__scopeId","data-v-330323f8"]]);export{G as C,J as V,W as a};
