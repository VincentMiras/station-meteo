import{_,c,a as t,F as f,r as g,o as u,w as v,d as b,u as p,t as w,e as y,f as x}from"./index-Dfmm6TkW.js";import{u as h,a as k}from"./DataStore-D3pCgWNr.js";const C={class:"station-form"},S=["id","value"],V=["for"],D={__name:"ChoixStation",setup(m){const s=h();return(e,o)=>(u(),c("fieldset",C,[o[1]||(o[1]=t("legend",{class:"station-legend"},"Choisissez la/les station(s) à afficher :",-1)),(u(),c(f,null,g(["piensg027","piensg028","piensg030","piensg031","piensg032"],n=>t("div",{class:"station-option",key:n},[v(t("input",{type:"checkbox",id:n,value:n,"onUpdate:modelValue":o[0]||(o[0]=r=>p(s).station=r)},null,8,S),[[b,p(s).station]]),t("label",{for:n},w(n),9,V)])),64))]))}},R=_(D,[["__scopeId","data-v-a0594fb8"]]),M={class:"weather-form"},$={class:"weather-option-all"},B=["checked"],E=["id","value"],L=["for"],P={__name:"ChoixCapteur",setup(m){const s=h(),e=r=>({temperature:"Température",pressure:"Pression",humidity:"Humidité",rain:"Précipitations",luminosity:"Luminosité",wind_heading:"Direction du vent",wind_speed_avg:"Vitesse moyenne du vent",position:"Position"})[r]||r,o=y(()=>s.selectedMeasures.length===8),n=()=>{o.value?s.selectedMeasures=[]:s.selectedMeasures=["temperature","pressure","humidity","rain","luminosity","wind_heading","wind_speed_avg","position"]};return(r,a)=>(u(),c("fieldset",M,[a[2]||(a[2]=t("legend",{class:"weather-legend"},"Choisissez les mesures que vous souhaitez voir :",-1)),t("div",$,[t("input",{type:"checkbox",id:"select-all",checked:o.value,onChange:n},null,40,B),a[1]||(a[1]=t("label",{for:"select-all"},"Tout sélectionner",-1))]),(u(),c(f,null,g(["temperature","pressure","humidity","rain","luminosity","wind_heading","wind_speed_avg","position"],i=>t("div",{class:"weather-option",key:i},[v(t("input",{type:"checkbox",id:i,value:i,"onUpdate:modelValue":a[0]||(a[0]=l=>p(s).selectedMeasures=l)},null,8,E),[[b,p(s).selectedMeasures]]),t("label",{for:i},w(e(i)),9,L)])),64))]))}},T=_(P,[["__scopeId","data-v-c156437b"]]),U=["disabled"],z={__name:"ValidationBouton",setup(m){const s=x(),e=h(),o=k();let n=e.mode;const r=async()=>{console.log("Mesures sélectionnées :",e.queryParams),console.log("URL auto ?:",e.url_fetch);try{o.data=await i(e.url_fetch),console.log("Données récupérées:",o.data),s.push("/dashboard"+n)}catch(l){console.error("Une erreur s'est produite, impossible de récupérer les données",l)}},a=y(()=>e.mode==="sample"&&!e.startDate||e.selectedMeasures.length===0||e.station.length===0),i=async l=>{try{const d=await fetch(l);if(!d.ok)throw new Error("Erreur de récupération des données");return await d.json()}catch(d){throw console.error("Erreur lors de la récupération des données:",d),d}};return(l,d)=>(u(),c("button",{class:"validate-btn",onClick:r,disabled:a.value},"Valider",8,U))}},j=_(z,[["__scopeId","data-v-bab113fb"]]);export{T as C,j as V,R as a};
